# FILE: .github/workflows/reusable-label-on-approve.yml

name: Reusable Label on Approval Logic

on:
  workflow_call:
    inputs:
      pr-number:
        description: 'The number of the pull request'
        required: true
        type: string
    secrets:
      ORGANIZATION_TOKEN:
        description: "PAT with read:org (및 필요 시 repo 권한)"
        required: true

jobs:
  labeler:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Check approval count and apply label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORGANIZATION_TOKEN }}
          script: |
            const prNumber = ${{ inputs.pr-number }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const labelName = 'ready-to-merge';

            console.log(`Processing PR #${prNumber} in ${owner}/${repo}`);

            // 1. PR의 모든 리뷰 목록 가져오기
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: prNumber,
            });

            // 2. 사용자별 최신 리뷰 상태를 집계하여 순수 승인자 계산
            const latestReviews = new Map();
            for (const review of reviews) {
              if (review.state !== 'PENDING' && review.user) {
                // DISMISSED된 리뷰는 이전 승인을 무효화하므로 덮어쓴다.
                latestReviews.set(review.user.login, review.state);
              }
            }

            const approvingReviewers = new Set();
            for (const [user, state] of latestReviews.entries()) {
              if (state === 'APPROVED') {
                approvingReviewers.add(user);
              }
            }
            
            const approvalCount = approvingReviewers.size;
            console.log(`Unique approval count: ${approvalCount}`);

            // 3. 현재 PR의 라벨 목록 확인
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: prNumber,
            });
            const hasLabel = currentLabels.some(label => label.name === labelName);

            // 4. 승인 수에 따라 라벨 추가 또는 삭제
            if (approvalCount >= 3 && !hasLabel) {
              console.log(`Adding '${labelName}' label.`);
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: [labelName],
              });
            } else if (approvalCount < 3 && hasLabel) {
              console.log(`Removing '${labelName}' label.`);
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: prNumber,
                name: labelName,
              });
            } else {
              console.log('No label change needed.');
            }
