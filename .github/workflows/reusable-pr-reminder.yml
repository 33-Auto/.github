name: Reusable PR Reminder Logic

# 다른 워크플로우에서 호출될 수 있도록 설정
on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL: # 호출하는 쪽에서 Slack Webhook URL을 전달받음
        required: true
      ORGANIZATION_TOKEN:
        description: "PAT with read:org (및 필요 시 repo 권한)"
        required: true

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - name: 리뷰 승인이 되지 않은 PR 목록 조회 및 Slack 알림
        uses: actions/github-script@v7
        with:
          # 호출자가 전달한 시크릿을 여기서 사용한다.
          github-token: ${{ secrets.ORGANIZATION_TOKEN }}
          script: |
            // 1) 오픈된 PR 목록 조회
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            const stalePrs = [];
            const now = new Date();

            for (const pr of prs) {
              // 드래프트이거나 'do-not-remind' 라벨이 붙은 PR은 건너뜀
              if (pr.draft || pr.labels.some(label => label.name === 'do-not-remind')) {
                continue;
              }

              const prDate = new Date(pr.created_at);
              const hoursSinceCreation = (now - prDate) / (1000 * 60 * 60);

              // 24시간 이상 지난 PR만 대상으로 함
              if (hoursSinceCreation < 24) {
                continue;
              }
              
              // --- 핵심 변경 로직 시작 ---
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });

              // 'APPROVED' 상태의 리뷰를 남긴 고유한 유저 목록을 만든다
              const approvingReviewers = new Set();
              reviews.forEach(review => {
                if (review.state === 'APPROVED') {
                  approvingReviewers.add(review.user.login);
                }
              });

              const approvalCount = approvingReviewers.size;

              // 승인 수가 3명 미만인 경우에만 리마인더 목록에 추가
              if (approvalCount < 3) {
                // 메시지에 현재 승인 수를 표시하기 위해 객체에 추가
                pr.approvalCount = approvalCount; 
                stalePrs.push(pr);
              }
              // --- 핵심 변경 로직 끝 ---
            }

            // 리마인드가 필요한 PR이 있을 경우 Slack 메시지 전송
            if (stalePrs.length > 0) {
              let message = `🔔 *리뷰 승인이 더 필요합니다!* (현재 ${stalePrs.length}개 PR 대기중)\n`;
              for (const pr of stalePrs) {
                // 메시지에 현재 승인 현황을 포함 (예: 승인: 1/3)
                message += `\n- <${pr.html_url}|#${pr.number} ${pr.title}> (승인: ${pr.approvalCount}/3)`;
              }

              const slackWebhookUrl = "${{ secrets.SLACK_WEBHOOK_URL }}";
              await fetch(slackWebhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: message }),
              });
            } else {
              console.log("No stale PRs needing more approvals found.");
            }
