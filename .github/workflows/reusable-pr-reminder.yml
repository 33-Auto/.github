name: Reusable PR Reminder Logic

# 다른 워크플로우에서 호출될 수 있도록 설정
on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL: # 호출하는 쪽에서 Slack Webhook URL을 전달받음
        required: true
      SLACK_USER_MAP: # (선택) GitHub 유저와 Slack 유저를 매핑하기 위한 정보
        required: false

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - name: 리뷰 승인이 되지 않은 PR 목록 조회 및 Slack 알림
        uses: actions/github-script@v7
        with:
          script: |
            // 1) 오픈된 PR 목록 조회
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            const prsToRemind = [];
            // (선택) Slack 멘션을 위한 유저 맵핑 정보 (JSON 형태의 Secret/Variable)
            const slackUserMap = JSON.parse('${{ secrets.SLACK_USER_MAP || '{}' }}');
            const repoName = context.repo.repo; // 현재 리포지토리 이름 가져오기

            for (const pr of prs) {
              // 드래프트이거나 'do-not-remind' 라벨이 붙은 PR은 건너뜀
              if (pr.draft || pr.labels.some(label => label.name === 'do-not-remind')) {
                continue;
              }
              
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: repoName,
                pull_number: pr.number,
              });

              // 'APPROVED' 상태의 리뷰를 남긴 고유한 유저 목록 생성
              const approvingReviewers = new Set();
              reviews.forEach(review => {
                if (review.state === 'APPROVED') {
                  approvingReviewers.add(review.user.login);
                }
              });

              const approvalCount = approvingReviewers.size;

              // 승인 수가 3명 미만인 경우에만 리마인더 목록에 추가
              if (approvalCount < 3) {
                const prInfo = {
                  ...pr,
                  approvalCount: approvalCount,
                  approvers: Array.from(approvingReviewers),
                  reviewers: pr.requested_reviewers.map(r => r.login),
                };
                prsToRemind.push(prInfo);
              }
            }

            // 리마인드가 필요한 PR이 있을 경우 Slack 메시지 전송
            if (prsToRemind.length > 0) {
              // --- Slack Block Kit을 사용한 메시지 구성 ---
              const blocks = [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🔔 리뷰 승인이 더 필요합니다!"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": `현재 *${prsToRemind.length}개*의 PR이 리뷰를 기다리고 있습니다.`
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ];

              for (const pr of prsToRemind) {
                const approverText = pr.approvers.length > 0 ? pr.approvers.join(', ') : '없음';
                
                const reviewerMentions = pr.reviewers.map(reviewer => {
                  const slackUserId = slackUserMap[reviewer];
                  return slackUserId ? `<@${slackUserId}>` : reviewer;
                }).join(', ');
                const reviewerText = reviewerMentions.length > 0 ? reviewerMentions : '지정되지 않음';

                blocks.push({
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": `*<${pr.html_url}|[${repoName}] #${pr.number} ${pr.title}>*`
                  }
                });
                blocks.push({
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": `*승인 현황:*\n${pr.approvalCount}/3` },
                    { "type": "mrkdwn", "text": `*작성자:*\n${pr.user.login}` },
                    { "type": "mrkdwn", "text": `*승인한 리뷰어:*\n${approverText}` },
                    { "type": "mrkdwn", "text": `*리뷰 요청:*\n${reviewerText}` }
                  ]
                });
                blocks.push({ "type": "divider" });
              }

              const slackWebhookUrl = "${{ secrets.SLACK_WEBHOOK_URL }}";
              await fetch(slackWebhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ blocks: blocks }), // text 대신 blocks를 사용
              });
            } else {
              console.log("No PRs needing more approvals found.");
            }
