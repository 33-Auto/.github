# .github/workflows/reusable-pr-assign-and-review.yml
name: Reusable - PR Assignee & Review Request

on:
  workflow_call:
    inputs:
      team-slug-for-review:
        description: "The slug of the team to request reviews from"
        required: true
        type: string
      pr-author:
        description: "The login of the PR author"
        required: true
        type: string
      pr-number:
        description: "The number of the pull request"
        required: true
        type: string

# 'teams:' 권한은 존재하지 않으므로 제거함. 필요한 리포지토 권한만 설정한다.
permissions:
  pull-requests: write # 리뷰어 요청용
  issues: write # Assignee 추가용
  contents: read # (선택) 리포지토 내용 읽기용

jobs:
  assign-and-request:
    runs-on: ubuntu-latest
    steps:
      - name: Assign 및 리뷰어 일괄 요청 (ORGANIZATION_TOKEN 사용)
        # actions/github-script에 github-token으로 PAT 전달
        uses: actions/github-script@v7
        with:
          # 워크플로우 내에서 사용 가능한 시크릿 이름을 사용한다.
          # 이 파일에서는 ORGANIZATION_TOKEN 시크릿을 참조하도록 설정했다.
          github-token: ${{ secrets.ORGANIZATION_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = parseInt('${{ inputs.pr-number }}');
            const prAuthor = '${{ inputs.pr-author }}';
            const teamSlug = '${{ inputs.team-slug-for-review }}';

            // 1) Assignee 지정 (PR 작성자 지정)
            try {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: prNumber,
                assignees: [prAuthor]
              });
              console.log(`✅ Assigned PR #${prNumber} to ${prAuthor}`);
            } catch (e) {
              console.warn(`Could not assign PR author: ${e.message}`);
            }

            // 2) 팀 멤버 전체 조회 (PAT로 인증되므로 가능)
            let reviewers = [];
            try {
              const teamMembers = await github.paginate(
                github.rest.teams.listMembersInOrg,
                { org: owner, team_slug: teamSlug }
              );
              const allLogins = teamMembers.map(u => u.login);
              // PR 작성자 제외
              reviewers = allLogins.filter(login => login !== prAuthor);
            } catch (e) {
              console.error(`❌ Failed to fetch team members for '${teamSlug}': ${e.message}`);
              return;
            }

            if (reviewers.length === 0) {
              console.info('No reviewers to request.');
              return;
            }

            console.log(`Requesting reviews from: ${reviewers.join(', ')}`);

            // 3) 최대 15명씩 나눠서 리뷰 요청 (API 제한)
            const chunkSize = 15;
            for (let i = 0; i < reviewers.length; i += chunkSize) {
              const chunk = reviewers.slice(i, i + chunkSize);
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number: prNumber,
                reviewers: chunk
              });
            }
